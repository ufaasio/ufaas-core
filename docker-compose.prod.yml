services:
  db:
    image: timescale/timescaledb:latest-pg16
    # image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db.data:/var/lib/postgresql/data
    networks:
      - data

  nocodb: 
    image: "nocodb/nocodb:latest"
    restart: unless-stopped
    # depends_on: 
    #   db: 
    #     condition: service_healthy
    environment: 
      NC_DB: "pg://db?u=${POSTGRES_USER}&p=${POSTGRES_PASSWORD}&d=${POSTGRES_DB}"
    volumes: 
      - "./nc.data:/usr/app/data"
    networks:
      - data
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nocodb.entrypoints=web"
      - "traefik.http.routers.nocodb.rule=Host(`nocodb${DOMAIN}`)"
      - "traefik.http.routers.nocodb-secure.entrypoints=websecure"
      - "traefik.http.routers.nocodb-secure.rule=Host(`nocodb${DOMAIN}`)"
      - "traefik.http.routers.nocodb-secure.tls=true"
      - "traefik.http.routers.nocodb-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"
      - "traefik.docker.network=traefik-net"

  app:
    build: app
    restart: unless-stopped
    command: python app.py
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      - DATABASE_URL_SYNC=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
      # - DATABASE_URL=sqlite+aiosqlite:///./logs/app.db
    volumes:
      - ./app/logs:/app/logs
    # ports:
    #   - 3010:3000
    networks:
      - data
      - traefik-net
      # - mongo-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}.rule=${DOMAINS}"
      # - "traefik.http.routers.${PROJECT_NAME}.middlewares=https-redirect"
      - "traefik.http.routers.${PROJECT_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-secure.rule=${DOMAINS}"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik-net"

  mongo:
    image: mongo
    restart: unless-stopped
    volumes:
      - ./mongo.data:/data/db
    networks:
      - data
      # - mongo-net

  mongo-express:
    image: mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_OPTIONS_READONLY=true
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    networks:
      - data
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express.rule=Host(`mongo${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.rule=Host(`mongo${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-mongo-express-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.${PROJECT_NAME}-mongo-express.loadbalancer.server.port=8081"
      - "traefik.docker.network=traefik-net"

networks:
  traefik-net:
    external: true
  data:
    name: ufaas-net
  # mongo-net:
  #   external: true
